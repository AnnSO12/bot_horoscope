import telebot
from telebot.types import ReplyKeyboardMarkup
import datetime
import requests
import json
from bs4 import BeautifulSoup
from apscheduler.schedulers.background import BackgroundScheduler

bot = telebot.TeleBot("")
dd = 0
mm = 0
yy = 0
user_names = {}
bg_signs = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø

daily_subscriptions = {}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.row("üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "üíº –†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø")
keyboard.row("‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "üê∫ –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")
keyboard.row("üßÆ –ê–Ω–≥–µ–ª—å—Å–∫–æ–µ —á–∏—Å–ª–æ", "üë©‚Äç‚ù§Ô∏è‚Äçüë® –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
keyboard.row("üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")

# –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
keyboard_sov = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_sov.row('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∞–º')
keyboard_sov.row('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞')
keyboard_sov.row('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

user_placement = {}

user_start = 0
user_sov_choice = 1
user_sov_name1 = 2
user_sov_name2 = 3
user_sov_data1 = 4
user_sov_data2 = 5


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_placement[message.chat.id] = user_start
    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–æ—Ä–æ—Å–∫–æ–ø. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì(–Ω–∞–ø—Ä–∏–º–µ—Ä: 14.05.2006).")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
def send_daily_horoscopes():
    now = datetime.datetime.now()
    print(f"–ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –≤ {now}")

    for chat_id, sub_data in daily_subscriptions.items():
        try:
            sign = sub_data['sign']
            text = get_horoscope(sign, "üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            today = datetime.datetime.now().strftime("%d.%m.%Y")
            message = f"‚ú® –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {get_zodiac_sign_display1(sign)} –Ω–∞ {today} ‚ú®\n\n{text}"

            bot.send_message(chat_id, message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ —á–∞—Ç {chat_id}: {e}")


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9:00 —É—Ç—Ä–∞
scheduler.add_job(
    send_daily_horoscopes,
    'cron',
    hour=9,
    minute=00,
    timezone='Europe/Moscow'
)


def back(message):
    user_id = message.chat.id
    state = user_placement[user_id]

    if state == user_sov_choice:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        user_placement[user_id] = user_start
    elif state == user_sov_name1 or state == user_sov_name2:
        bot.send_message(message.chat.id, "–ö–∞–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=keyboard_sov)
        user_placement[user_id] = user_sov_choice
    elif state == user_sov_data1 or state == user_sov_data2:
        bot.send_message(message.chat.id, "–ö–∞–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=keyboard_sov)
        user_placement[user_id] = user_sov_choice
    else:
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=keyboard)
        user_placement[user_id] = user_start


# –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
def get_totem_info(day: int, month: int) -> tuple[str, str | None]:
    zodiac = get_zodiac_sign_display_from_eng(get_zodiac_sign(day, month))
    animals = {
        "–û–≤–µ–Ω": (
            "üê∂ –°–æ–±–∞–∫–∞: –í–æ–∏–Ω —Å–≤–µ—Ç–∞, –æ–±–ª–∞—á–µ–Ω–Ω—ã–π –≤ —à–µ—Ä—Å—Ç—å! –í–∞—à–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å ‚Äì –ª–µ–≥–µ–Ω–¥–∞, –≤–∞—à–∞ —Ö—Ä–∞–±—Ä–æ—Å—Ç—å ‚Äì –º–∏—Ñ. "
            "–í—ã –±–µ–∂–∏—Ç–µ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã. "
            "–ò–¥–µ–∞–ª—ã? –í–µ—Ä–Ω–æ—Å—Ç—å —Ö–æ–∑—è–π—Å–∫–æ–π —Ä—É–∫–µ! –≠–Ω–µ—Ä–≥–∏—è? –ù–µ–∏—Å—Å—è–∫–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–∞—è, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ —Ä–∞–∑—Ä—É—à–∏—Ç—å —Ç–∏—à–∏–Ω—É –≤—Å–µ–ª–µ–Ω–Ω–æ–π! "
            "–í–∞—à–µ –∫—Ä–µ–¥–æ: '–ó–∞ –º–Ω–æ–π! –¢–∞–º –∫–æ—à–∫–∞!",
            "https://i.pinimg.com/736x/2e/99/43/2e99438f37e830d04d25da78fd8f6524.jpg"
        ),
        "–¢–µ–ª–µ—Ü": (
            "üê¢ –ß–µ—Ä–µ–ø–∞—Ö–∞: –ú—É–¥—Ä–µ—Ü, –ø–æ–∑–Ω–∞–≤—à–∏–π –¥–∑–µ–Ω –∑–∞–¥–æ–ª–≥–æ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! –í—Ä–µ–º—è –¥–ª—è –≤–∞—Å ‚Äì –∏–ª–ª—é–∑–∏—è, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äì –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞. "
            "–í—ã –ø–ª—ã–≤–µ—Ç–µ –ø–æ —Ä–µ–∫–µ –∂–∏–∑–Ω–∏ —Å –≥—Ä–∞—Ü–∏–µ–π –±–∞—Ä–∂–∏, –≥—Ä—É–∂–µ–Ω–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é. "
            "–ö–æ–º—Ñ–æ—Ä—Ç ‚Äì –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äì —Å–ø–æ—Å–æ–±–Ω–∞ —Å–¥–≤–∏–Ω—É—Ç—å –≥–æ—Ä—É, –µ—Å–ª–∏ –Ω–∞ –µ—ë –≤–µ—Ä—à–∏–Ω–µ –æ–¥—É–≤–∞–Ω—á–∏–∫.",
            "https://i.pinimg.com/736x/b8/ce/d0/b8ced0c33c6acaebd5a36f5e9ef4e7aa.jpg"
        ),
        "–ë–ª–∏–∑–Ω–µ—Ü—ã": (
            "üê¨ –î–µ–ª—å—Ñ–∏–Ω: –ì–µ–Ω–∏–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –≤–∑–ª–∞–º—ã–≤–∞—é—â–∏–π –∫–æ–¥—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –æ–¥–Ω–∏–º —â–µ–ª—á–∫–æ–º –ø–ª–∞–≤–Ω–∏–∫–∞! "
            "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ ‚Äì –≤–∞—à –¥–≤–∏–≥–∞—Ç–µ–ª—å. "
            "–í—ã ‚Äì –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –æ–∫–µ–∞–Ω—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫!",
            "https://i.pinimg.com/736x/55/00/3a/55003a9356aa22760e32c3a5a37dbe6a.jpg"
        ),
        "–†–∞–∫": (
            "üêß –ü–∏–Ω–≥–≤–∏–Ω: –•—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–æ–º–∞—à–Ω–µ–≥–æ –æ—á–∞–≥–∞, —Å–æ–±–∏—Ä–∞—é—â–∏–π —Ç–µ–ø–ª–æ –ø–æ –∫—É—Å–æ—á–∫–∞–º –≤ —Å—É—Ä–æ–≤—ã—Ö –ª—å–¥–∞—Ö –±—ã—Ç–∏—è! "
            "–°–µ–º—å—è ‚Äì –≤–∞—à —è–∫–æ—Ä—å, –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Äì –≤–∞—à–∞ –º–∞–Ω—Ç—Ä–∞. –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ —É—é—Ç –¥–∞–∂–µ —Ç–∞–º, –≥–¥–µ –µ–≥–æ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.",
            "https://i.pinimg.com/736x/88/4b/89/884b8919119c2e0e9aad2b7effe826e7.jpg"
        ),
        "–õ–µ–≤": (
            "üê∫ –í–æ–ª–∫: –ö–æ—Ä–æ–ª—å —Å–∞–≤–∞–Ω–Ω—ã, –∑–∞—Ç–µ—Ä—è–≤—à–∏–π—Å—è –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –¥–∂—É–Ω–≥–ª—è—Ö! –ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –ª–∏–¥–µ—Ä? –í–æ–∑–º–æ–∂–Ω–æ... "
            "–î–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äì –æ–Ω–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –≥–¥–µ —Å—Ç–µ–π–∫! –í–æ–π—Ç–µ? –ü—É—Å—Ç—å –º–∏—Ä —É—Å–ª—ã—à–∏—Ç –≤–∞—à—É –º–æ—â—å!",
            "https://pin.it/4SGI8f4mC"
        ),
        "–î–µ–≤–∞": (
            "ü¶ù –ï–Ω–æ—Ç: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ö–∞–æ—Å–∞, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–π –±–µ—Å–ø–æ—Ä—è–¥–æ–∫ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–æ! "
            "–í—ã –Ω–∞–≤–µ–¥—ë—Ç–µ –ø–æ—Ä—è–¥–æ–∫... –≤ —á—É–∂–æ–º –º—É—Å–æ—Ä–Ω–æ–º –±–∞–∫–µ. –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å ‚Äî –≤–∞—à –¥–∞—Ä. –õ–æ–≤–∫–∏–µ –ª–∞–ø–∫–∏? –ù–µ–æ—Ç—Ä–∞–∑–∏–º—ã!",
            "https://pin.it/6ahccMCsk"
        ),
        "–í–µ—Å—ã": (
            "ü¶¶ –í—ã–¥—Ä–∞: –ì–∞—Ä–º–æ–Ω–∏–∑–∞—Ç–æ—Ä –≤—Å–µ–ª–µ–Ω–Ω–æ–π, –∏—â—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–∞–∂–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–π –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π. "
            "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–∞—à –∫–æ–∑—ã—Ä—å, –¥–∏–ø–ª–æ–º–∞—Ç–∏—è ‚Äî –≤–∞—à–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è!",
            "https://pin.it/4X8xNeRAK"
        ),
        "–°–∫–æ—Ä–ø–∏–æ–Ω": (
            "üê± –ö–æ—Ç: –ù–æ—á–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏–∫, —á—å—è —Å—Ç—Ä–∞—Å—Ç—å –≥–æ—Ä–∏—Ç —è—Ä—á–µ –∑–≤–µ–∑–¥! –ó–∞–≥–∞–¥–æ—á–Ω—ã–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π. "
            "–ò–Ω—Ç—É–∏—Ü–∏—è? –û—Ö–æ—Ç–∞ –Ω–∞ –ª–∞–∑–µ—Ä–Ω—É—é —É–∫–∞–∑–∫—É ‚Äî —Å–≤—è—â–µ–Ω–Ω–∞!",
            "https://i.pinimg.com/736x/69/d4/91/69d491c5c27bce7f2b58cf9a4aa86424.jpg"
        ),
        "–°—Ç—Ä–µ–ª–µ—Ü": (
            "üê¥ –õ–æ—à–∞–¥—å:  –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤–µ—Ç—Ä–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–º–∞, —Å–∫–∞—á—É—â–∏–π –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É. "
            "–ü—É—Å—Ç—å –≤–µ—Ç–µ—Ä —Å–≤–æ–±–æ–¥—ã —Ä–∞–∑–≤–µ–≤–∞–µ—Ç –≤–∞—à—É –≥—Ä–∏–≤—É –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–∞–ø–∞—Ö –Ω–æ–≤—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!",
            "https://pin.it/23tirzJXv"
        ),
        "–ö–æ–∑–µ—Ä–æ–≥": (
            "üêê –ö–æ–∑–µ–ª: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —É—Å–ø–µ—Ö–∞, –≤–∑–±–∏—Ä–∞—é—â–∏–π—Å—è –ø–æ —Å–∫–ª–æ–Ω–∞–º –∫ –≤–µ—Ä—à–∏–Ω–µ! "
            "–ù–∏ –æ–¥–Ω–∞ –≥–æ—Ä–∞ –Ω–µ —É—Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –≤–∞—à–∏–º —É–ø–æ—Ä—Å—Ç–≤–æ–º‚Ä¶ –∏ –∞–ø–ø–µ—Ç–∏—Ç–æ–º!",
            "https://i.pinimg.com/736x/eb/c7/fe/ebc7feaee202ec5f18ffb2ebafcdcec2.jpg"
        ),
        "–í–æ–¥–æ–ª–µ–π": (
            "ü¶Ö –û—Ä–µ–ª: –ü—Ä–æ–≤–∏–¥–µ—Ü –∏ –º—ã—Å–ª–∏—Ç–µ–ª—å, –≤–∑–ª–µ—Ç–∞—é—â–∏–π –≤—ã—à–µ –ø—Ä–µ–¥—Ä–∞—Å—Å—É–¥–∫–æ–≤. "
            "–í–∞—à–∏ –∏–¥–µ–∏ –º–µ–Ω—è—é—Ç –º–∏—Ä. –ü–æ–ª–µ—Ç–∏—Ç–µ? –¢–æ–ª—å–∫–æ –≤–≤–µ—Ä—Ö!",
            "https://i.pinimg.com/736x/19/1a/4f/191a4fdbc00a64e6957c5f269ec90083.jpg"
        ),
        "–†—ã–±—ã": (
            "üê¨ –î–µ–ª—å—Ñ–∏–Ω: –¢–≤–æ—Ä–µ—Ü –≥–∞—Ä–º–æ–Ω–∏–∏, —á–µ–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø–æ—Ç–æ–∫ –≤–µ–¥—ë—Ç –∫ —Å—á–∞—Å—Ç—å—é. "
            "–¢–≤–æ—Ä–∏—Ç–µ —á—É–¥–µ—Å–∞ –¥–æ–±—Ä–æ—Ç–æ–π, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
            "https://i.pinimg.com/736x/cd/63/95/cd6395c6b4efb9a815cd94e2a8409a05.jpg"
        )
    }
    return animals.get(zodiac, ("üêæ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ", None))


def get_angel_number_text(day: int, month: int, year: int) -> str:
    total = sum(int(d) for d in f"{day:02d}{month:02d}{year}")
    while total > 9:
        total = sum(int(d) for d in str(total))
    triple = str(total) * 3

    angel_numbers = {
        "111": "‚ú® 111 ‚Äî –°—Ç–∞–Ω—Ü–∏—è –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞! –í–∞—à–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü –Ω–∞ –õ—É–Ω—É –≤–º–µ—Å—Ç–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ.",
        "222": "üåü 222 ‚Äî –î–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –í—Å–µ–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.",
        "333": "üî• 333 ‚Äî –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏! –í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∞ –≤–æ–∑–Ω–µ—Å–µ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å. –ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö –æ –ø–æ–º–æ—â–∏.",
        "444": "üõ°Ô∏è 444 ‚Äî –ê–Ω–≥–µ–ª—ã –Ω–∞–±–ª—é–¥–∞—é—Ç –∑–∞ –≤–∞–º–∏. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –≤–∞—à–∏ –ø–æ—Å—Ç—É–ø–∫–∏ –≤–∏–¥–Ω—ã –∏ –≤–∞–∂–Ω—ã.",
        "555": "üå™Ô∏è 555 ‚Äî –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–º–µ–Ω–∞–º. –í–∞—à–∞ –∂–∏–∑–Ω—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å—Å—è —Å –Ω–æ–≥ –Ω–∞ –≥–æ–ª–æ–≤—É, –Ω–æ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –∫ –ª—É—á—à–µ–º—É.",
        "666": "üßò 666 ‚Äî –ü–µ—Ä–µ—Å—Ç–∞–Ω—å—Ç–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º. –í –∂–∏–∑–Ω–∏ –µ—Å—Ç—å –≤–µ—â–∏ –ø–æ–≤–∞–∂–Ω–µ–µ, –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å.",
        "777": "üéØ 777 ‚Äî –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–∏—è—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é.",
        "888": "üí∞ 888 ‚Äî –ò–∑–æ–±–∏–ª–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –±–ª–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–∞—è.",
        "999": "üåå 999 ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ —ç—Ç–∞–ø–∞. –í—Ä–µ–º—è –ø—Ä–æ—â–∞—Ç—å—Å—è —Å –ø—Ä–æ—à–ª—ã–º –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥ —Å –æ–ø—Ç–∏–º–∏–∑–º–æ–º."
    }

    return angel_numbers.get(triple, "üîç –ê–Ω–≥–µ–ª—å—Å–∫–æ–µ —á–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def get_zodiac_sign_display_from_eng(sign):
    sign_map = {
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥",
        "aquarius": "–í–æ–¥–æ–ª–µ–π",
        "pisces": "–†—ã–±—ã",
        "aries": "–û–≤–µ–Ω",
        "taurus": "–¢–µ–ª–µ—Ü",
        "gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã",
        "cancer": "–†–∞–∫",
        "leo": "–õ–µ–≤",
        "virgo": "–î–µ–≤–∞",
        "libra": "–í–µ—Å—ã",
        "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω",
        "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü",
        "error": "error"
    }
    return sign_map.get(sign, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫")


def get_zodiac_sign_display(day: int, month: int) -> str:
    sign_map = {
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥",
        "aquarius": "–í–æ–¥–æ–ª–µ–π",
        "pisces": "–†—ã–±—ã",
        "aries": "–û–≤–µ–Ω",
        "taurus": "–¢–µ–ª–µ—Ü",
        "gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã",
        "cancer": "–†–∞–∫",
        "leo": "–õ–µ–≤",
        "virgo": "–î–µ–≤–∞",
        "libra": "–í–µ—Å—ã",
        "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω",
        "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü",
        "error": "error"
    }
    return sign_map.get(get_zodiac_sign(day, month), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫")


def get_zodiac_sign_display1(day: int, month: int) -> str:
    sign_map = {
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥–æ–≤",
        "aquarius": "–í–æ–¥–æ–ª–µ–µ–≤",
        "pisces": "–†—ã–±",
        "aries": "–û–≤–Ω–æ–≤",
        "taurus": "–¢–µ–ª–µ—Ü–æ–≤",
        "gemini": "–ë–ª–∏–∑–Ω–µ—Ü–æ–≤",
        "cancer": "–†–∞–∫–æ–≤",
        "leo": "–õ—å–≤–æ–≤",
        "virgo": "–î–µ–≤",
        "libra": "–í–µ—Å–æ–≤",
        "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω–æ–≤",
        "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü–æ–≤",
        "error": "error"
    }
    return sign_map.get(get_zodiac_sign(day, month), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Å–∞–π—Ç–∞
def get_horoscope(sign, horoscope_type):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ URL-—á–∞—Å—Ç—å
    type_map = {
        "üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø": "today",
        "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø": "love",
        "üíº –†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø": "business"
    }

    url_type = type_map.get(horoscope_type, "today")
    url = f"https://horo.mail.ru/prediction/{sign.lower()}/{url_type}/"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        content = soup.find('div', class_='b6a5d4949c e45a4c1552')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∫–ª–∞–º—É)
        for elem in content.find_all(['a', 'script', 'style', 'img']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        text = content.get_text(separator='\n', strip=True)

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def d_in_y(day: int, month: int):
    if (
            month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and 1 <= day <= 31:
        return True
    elif (month == 4 or month == 6 or month == 9 or month == 11) and 1 <= day <= 30:
        return True
    elif month == 2 and 1 <= day <= 28:
        return True
    else:
        return False


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
def get_zodiac_sign(day: int, month: int) -> str:
    if (month == 12 and day >= 22) or (month == 1 and day <= 19):
        return "capricorn"  # –ö–æ–∑–µ—Ä–æ–≥
    elif (month == 1 and day >= 20) or (month == 2 and day <= 19):
        return "aquarius"  # –í–æ–¥–æ–ª–µ–π
    elif (month == 2 and day >= 19 and day <= 29) or (month == 3 and day <= 20):
        return "pisces"  # –†—ã–±—ã
    elif (month == 3 and day >= 21) or (month == 4 and day <= 20):
        return "aries"  # –û–≤–µ–Ω
    elif (month == 4 and day >= 21) or (month == 5 and day <= 21):
        return "taurus"  # –¢–µ–ª–µ—Ü
    elif (month == 5 and day >= 22) or (month == 6 and day <= 21):
        return "gemini"  # –ë–ª–∏–∑–Ω–µ—Ü—ã
    elif (month == 6 and day >= 22) or (month == 7 and day <= 22):
        return "cancer"  # –†–∞–∫
    elif (month == 7 and day >= 23) or (month == 8 and day <= 23):
        return "leo"  # –õ–µ–≤
    elif (month == 8 and day >= 24) or (month == 9 and day <= 23):
        return "virgo"  # –î–µ–≤–∞
    elif (month == 9 and day >= 24) or (month == 10 and day <= 23):
        return "libra"  # –í–µ—Å—ã
    elif (month == 10 and day >= 24) or (month == 11 and day <= 22):
        return "scorpio"  # –°–∫–æ—Ä–ø–∏–æ–Ω
    elif (month == 11 and day >= 23) or (month == 12 and day <= 22):
        return "sagittarius"  # –°—Ç—Ä–µ–ª–µ—Ü
    else:
        return "error"


@bot.message_handler(func=lambda message: message.text == "üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")
def handle_subscribe(message):
    if dd == 0 or mm == 0:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
        return

    sign = get_zodiac_sign(dd, mm)
    daily_subscriptions[message.chat.id] = {'sign': sign}

    bot.send_message(
        message.chat.id,
        f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {get_zodiac_sign_display1(dd, mm)}!\n"
        f"–ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
def handle_unsubscribe(message):
    chat_id = message.chat.id
    if chat_id in daily_subscriptions:
        del daily_subscriptions[chat_id]
        bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø.", reply_markup=keyboard)
    else:
        bot.send_message(chat_id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global dd, mm, yy
    try:
        user_id = message.chat.id

        if user_id not in user_placement:
            user_placement[user_id] = user_start

        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            back(message)
            return

        if message.text in ["üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "üíº –†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø",
                            "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "üê∫ –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ",
                            "üßÆ –ê–Ω–≥–µ–ª—å—Å–∫–æ–µ —á–∏—Å–ª–æ", "üë©‚Äç‚ù§Ô∏è‚Äçüë® –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"]:
            handle_choice(message)
            return

        if message.text in ['–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∞–º', '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞']:
            sov(message)
            return

        if '.' in message.text:
            parts = message.text.strip().split('.')
            if len(parts) == 3:
                day, month, year = map(int, parts)
                if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= datetime.datetime.now().year:
                    sign = get_zodiac_sign_display(day, month)
                    if sign != "error":
                        dd, mm, yy = day, month, year
                        bot.send_message(message.chat.id,
                                         f"‚ú® –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {sign}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                         reply_markup=keyboard)
                    else:
                        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
                else:
                    bot.send_message(message.chat.id,
                                     "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2006)")
                return
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2006)")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def get_work_horoscope(sign):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –≤ URL-—Ñ–æ—Ä–º–∞—Ç Rambler
    sign_mapping = {
        "capricorn": "capricorn",
        "aquarius": "aquarius",
        "pisces": "pisces",
        "aries": "aries",
        "taurus": "taurus",
        "gemini": "gemini",
        "cancer": "cancer",
        "leo": "leo",
        "virgo": "virgo",
        "libra": "libra",
        "scorpio": "scorpio",
        "sagittarius": "sagittarius"
    }

    rambler_sign = sign_mapping.get(sign.lower(), "deva")
    url = f"https://horoscopes.rambler.ru/{rambler_sign}/career/"

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ Rambler
        content = soup.find('div', class_='dGWT9 cidDQ')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for elem in content.find_all(['a', 'script', 'style', 'img', 'iframe']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = content.get_text(separator='\n', strip=True)
        text = text.replace('–ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ:', '').strip()

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞–±–æ—á–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def get_love_horoscope(sign):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –≤ URL-—Ñ–æ—Ä–º–∞—Ç Rambler
    sign_mapping = {
        "capricorn": "capricorn",
        "aquarius": "aquarius",
        "pisces": "pisces",
        "aries": "aries",
        "taurus": "taurus",
        "gemini": "gemini",
        "cancer": "cancer",
        "leo": "leo",
        "virgo": "virgo",
        "libra": "libra",
        "scorpio": "scorpio",
        "sagittarius": "sagittarius"
    }

    rambler_sign = sign_mapping.get(sign.lower(), "oven")
    url = f"https://horoscopes.rambler.ru/{rambler_sign}/erotic/weekly/"

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ Rambler
        content = soup.find('div', class_='yLX2x Jgl8N vXHy6 YZauy')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for elem in content.find_all(['a', 'script', 'style', 'img', 'iframe']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = content.get_text(separator='\n', strip=True)
        text = text.replace('–ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ:', '').strip()

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª—é–±–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def handle_choice(message):
    global dd, mm
    user_id = message.chat.id
    choice = message.text

    if choice == "üë©‚Äç‚ù§Ô∏è‚Äçüë® –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å":
        bot.send_message(message.chat.id, '–ö–∞–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                         reply_markup=keyboard_sov)
        user_placement[user_id] = user_sov_choice
        return

    if choice == "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø":
        if dd == 0 or mm == 0:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
            return

        sign = get_zodiac_sign(dd, mm)
        horoscope_text = get_love_horoscope(sign)
        bot.send_message(message.chat.id, horoscope_text)
        return

    if choice == "üíº –†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø":
        if dd == 0 or mm == 0:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
            return

        sign = get_zodiac_sign(dd, mm)
        horoscope_text = get_work_horoscope(sign)
        bot.send_message(message.chat.id, horoscope_text)
        return

    if choice == "üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø":
        if dd == 0 or mm == 0:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
            return

        sign = get_zodiac_sign(dd, mm)
        horoscope_text = get_horoscope(sign, choice)
        bot.send_message(message.chat.id, horoscope_text)
        return

    if choice == "üê∫ –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ":
        if dd > 0 and mm > 0:
            description, image_url = get_totem_info(dd, mm)
            bot.send_message(message.chat.id, description)
            if image_url:
                bot.send_photo(message.chat.id, image_url)
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2006)")
        return

    if choice == "üßÆ –ê–Ω–≥–µ–ª—å—Å–∫–æ–µ —á–∏—Å–ª–æ":
        if dd > 0 and mm > 0 and yy > 0:
            result = get_angel_number_text(dd, mm, yy)
            bot.send_message(message.chat.id, f"üî¢ –í–∞—à–µ –∞–Ω–≥–µ–ª—å—Å–∫–æ–µ —á–∏—Å–ª–æ: {result}")
        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2006)")
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    response = "üîÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    bot.send_message(message.chat.id, response)


def sov(message):
    user_id = message.chat.id
    choice = message.text

    if message.text in ['–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∞–º']:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–º—è')
        bot.register_next_step_handler(message, sov_name1)
        return
    if message.text in ['–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞']:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—å—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09)')
        bot.register_next_step_handler(message, sov_signs_b)
        return


def sov_name1(message):
    chat_id = message.chat.id
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        back(message)
        return
    user_names[chat_id] = {'name1': message.text}
    bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è')
    bot.register_next_step_handler(message, sov_name2)


def sov_name2(message):
    chat_id = message.chat.id
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        back(message)
        return
    user_names[chat_id]['name2'] = message.text

    name1 = user_names[chat_id]['name1']
    name2 = user_names[chat_id]['name2']
    sov_names(name1, name2, message)
    del user_names[chat_id]


def calculate_name(name):
    alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èabcdefghijklmnopqrstuvwxyz"
    alp_values = {letter: i + 1 for i, letter in enumerate(alphabet)}
    name = name.lower()
    total_sum = sum(alp_values.get(char, 0) for char in name)
    while total_sum > 9:
        digits_sum = sum(int(digit) for digit in str(total_sum))
        total_sum = digits_sum
    return total_sum


def sov_names(name1, name2, message):
    num1 = calculate_name(name1)
    num2 = calculate_name(name2)
    sov_num = num1 + num2
    while sov_num > 9:
        digits_sum = sum(int(digit) for digit in str(sov_num))
        sov_num = digits_sum

    names_text(sov_num, message)


def names_text(sov_num, message):
    if sov_num == 1:
        response = '–°–æ—é–∑ –ª–∏–¥–µ—Ä–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å—Ç—Ä–µ–º–∏—Ç—Å—è –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –£—á–∏—Ç–µ—Å—å –∏—Å–∫–∞—Ç—å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å'
    elif sov_num == 2:
        response = ('–ú–∏—Ä –∏ —Å–æ–≥–ª–∞—Å–∏–µ, –ø–∞—Ä–∞ –±—É–¥–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–æ–±—â–∞, –∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Å '
                    '–ø–æ–º–æ—â—å—é –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –¢–∞–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç—Ä–æ—è—Ç—Å—è –Ω–∞ –¥—Ä—É–∂–±–µ –∏ —É–≤–∞–∂–µ–Ω–∏–∏')
    elif sov_num == 3:
        response = ('–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã —Å–º–æ–≥—É—Ç —Ö–æ—Ä–æ—à–æ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –°–æ—é–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å '
                    '–Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–º, –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –≤–æ–∑—å–º—ë—Ç –≤–µ—Ä—Ö –∏ –±—É–¥–µ—Ç –≥–ª–∞–≤–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å')
    elif sov_num == 4:
        response = ('–°–ø–æ–∫–æ–π–Ω–∞—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—Ä–∞. –í —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –Ω–µ—á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç —Å—Å–æ—Ä—ã, –Ω–æ'
                    ' –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —á—É–≤—Å—Ç–≤ –≤—ã—Ä–∞–∂–µ–Ω—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —è—Ä–∫–æ')
    elif sov_num == 5:
        response = ('–í —ç—Ç–æ–π –ø–∞—Ä–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —è—Ä–∫–∏–µ –∏ —Å—Ç—Ä–∞—Å—Ç–Ω—ã–µ. –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Å–æ—é–∑ –¥–≤—É—Ö –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö '
                    '–∏ —Å–µ–º–µ–π–Ω—ã—Ö –ª—é–¥–µ–π, —Å –¥—Ä—É–≥–æ–π –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ —Ç–∞–∫–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –Ω–µ —Å–∞–º–æ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ.')
    elif sov_num == 6:
        response = ('–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ª—é–±–≤–∏, –¥–æ–≤–µ—Ä–∏–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–∏. –≠—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è '
                    '–∫—Ä–µ–ø–∫–∏–º–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–∏—Ö –ª–µ—Ç, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∞—Ä–æ–π, –∏ –Ω–∞–¥–æ–ª–≥–æ –Ω–µ —Ä–∞–∑–ª—É—á–∞—Ç—å—Å—è')
    elif sov_num == 7:
        response = ('–û–¥–∏–Ω –∏–∑ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ —Å–∏–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è. –•–æ—Ä–æ—à–∏–π —Å–æ—é–∑ –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ ¬´–≤–µ–¥—É—â–∏–π¬ª '
                    '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ¬´–≤–µ–¥–æ–º–æ–≥–æ¬ª. –ê —Ç–æ—Ç, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —É–≤–∞–∂–∞–µ—Ç –∏ —Ü–µ–Ω–∏—Ç –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    elif sov_num == 8:
        response = ('–ü–∞—Ä—Ç–Ω—ë—Ä—ã –º–æ–≥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—è. –ù–æ –∏—Ö –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –∫–∞–∫–æ–π-—Ç–æ'
                    ' —Å–∏–ª–æ–π. –û–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –¥—Ä—É–≥ –±–µ–∑ –¥—Ä—É–≥–∞, –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É –Ω—É–∂–Ω–æ –º–µ—Å—Ç–æ —É–µ–¥–∏–Ω–µ–Ω–∏—è. –°—É–ø—Ä—É–≥–∏ –º–æ–≥—É—Ç'
                    ' —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –¥–µ–ª–∞—é—Ç –≤—ã–≤–æ–¥–æ–≤ –∏ —Å–Ω–æ–≤–∞ –Ω–∞—Å—Ç—É–ø–∞—é—Ç –Ω–∞ —Ç–µ –∂–µ –≥—Ä–∞–±–ª–∏.')
    else:
        response = ('–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∏–¥–µ–π, –≤–∑–≥–ª—è–¥–æ–≤ –Ω–∞ –º–∏—Ä. –û–¥–Ω–∞–∫–æ, –æ–¥–∏–Ω –∏–∑ —Å—É–ø—Ä—É–≥–æ–≤ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞—Ç—å '
                    '–æ–¥–µ—è–ª–æ –Ω–∞ —Å–µ–±—è –∏ —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º. –ù–µ —Å—Ç–æ–∏—Ç —Å–æ–ø–µ—Ä–Ω–∏—á–∞—Ç—å, –ª—É—á—à–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∞ —Å–∞–º–æ–º—É'
                    ' —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–π —Å—Ñ–µ—Ä–µ')
    bot.send_message(message.chat.id, response)


def sov_signs_b(message):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        back(message)
        return
    try:
        day, month = map(int, message.text.split('.'))
        if 1 <= day <= 31 and 1 <= month <= 12:
            sign_b = get_zodiac_sign_display_from_eng(get_zodiac_sign(day, month))
            if sign_b != "error":
                chat_id = message.chat.id  # ID —á–∞—Ç–∞
                bg_signs[chat_id] = {'sign_b': sign_b}
                bot.send_message(chat_id, f"‚ú®–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –º–∞–ª—å—á–∏–∫–∞: {sign_b}")
                bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–µ–≤–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09)')
                bot.register_next_step_handler(message, sov_signs_g)
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ sov_signs_b: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def sov_signs_res(filename, sign_b, sign_g, chat_id):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            try:
                compatibility = data[sign_b][sign_g]
                bot.send_message(chat_id, f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {sign_b} –∏ {sign_g}:\n\n{compatibility}")
            except KeyError:
                bot.send_message(chat_id, f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É {sign_b} –∏ {sign_g} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except FileNotFoundError:
        bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
        print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç –≤ —Ñ–∞–π–ª–µ {filename}.")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –≤ sov_signs_res: {e}")


def sov_signs_g(message):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        back(message)
        return
    day, month = map(int, message.text.split('.'))
    if 1 <= day <= 31 and 1 <= month <= 12:
        sign_g = get_zodiac_sign_display_from_eng(get_zodiac_sign(day, month))
        chat_id = message.chat.id
        sign_b = bg_signs[chat_id]['sign_b']
        bot.send_message(chat_id, f"‚ú®–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–µ–≤–æ—á–∫–∏: {sign_g}")
        sov_signs_res('sov_znaki.json', sign_b, sign_g, chat_id)
        del bg_signs[chat_id]
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        scheduler.shutdown()
