import requests
from bs4 import BeautifulSoup
import time
import threading
from apscheduler.schedulers.background import BackgroundScheduler



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
daily_subscriptions = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
def send_daily_horoscopes():
    now = datetime.datetime.now()
    print(f"–ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –≤ {now}")

    for chat_id, sub_data in daily_subscriptions.items():
        try:
            sign = sub_data['sign']
            text = get_horoscope(sign, "üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            today = datetime.datetime.now().strftime("%d.%m.%Y")
            message = f"‚ú® –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {get_zodiac_sign_display1(sign)} –Ω–∞ {today} ‚ú®\n\n{text}"

            bot.send_message(chat_id, message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ —á–∞—Ç {chat_id}: {e}")


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9:00 —É—Ç—Ä–∞
scheduler.add_job(
    send_daily_horoscopes,
    'cron',
    hour=9,
    minute=00,
    timezone='Europe/Moscow'
)

def get_zodiac_sign_display1(day: int, month: int) -> str:
    sign_map = {
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥–æ–≤",
        "aquarius": "–í–æ–¥–æ–ª–µ–µ–≤",
        "pisces": "–†—ã–±",
        "aries": "–û–≤–Ω–æ–≤",
        "taurus": "–¢–µ–ª–µ—Ü–æ–≤",
        "gemini": "–ë–ª–∏–∑–Ω–µ—Ü–æ–≤",
        "cancer": "–†–∞–∫–æ–≤",
        "leo": "–õ—å–≤–æ–≤",
        "virgo": "–î–µ–≤",
        "libra": "–í–µ—Å–æ–≤",
        "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω–æ–≤",
        "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü–æ–≤"
    }
    return sign_map.get(get_zodiac_sign(day, month), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Å–∞–π—Ç–∞
def get_horoscope(sign, horoscope_type):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ URL-—á–∞—Å—Ç—å
    type_map = {
        "üîÆ –û–±—ã—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø": "today",
        "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø": "love",
        "üíº –†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø": "business"
    }

    url_type = type_map.get(horoscope_type, "today")
    url = f"https://horo.mail.ru/prediction/{sign.lower()}/{url_type}/"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        content = soup.find('div', class_='b6a5d4949c e45a4c1552')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∫–ª–∞–º—É)
        for elem in content.find_all(['a', 'script', 'style', 'img']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        text = content.get_text(separator='\n', strip=True)

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
def get_zodiac_sign(day: int, month: int) -> str:
    if (month == 12 and day >= 22) or (month == 1 and day <= 20):
        return "capricorn"  # –ö–æ–∑–µ—Ä–æ–≥
    elif (month == 1 and day >= 21) or (month == 2 and day <= 18):
        return "aquarius"  # –í–æ–¥–æ–ª–µ–π
    elif (month == 2 and day >= 19 and day <= 29) or (month == 3 and day <= 20):
        return "pisces"  # –†—ã–±—ã
    elif (month == 3 and day >= 21) or (month == 4 and day <= 20):
        return "aries"  # –û–≤–µ–Ω
    elif (month == 4 and day >= 21) or (month == 5 and day <= 21):
        return "taurus"  # –¢–µ–ª–µ—Ü
    elif (month == 5 and day >= 22) or (month == 6 and day <= 21):
        return "gemini"  # –ë–ª–∏–∑–Ω–µ—Ü—ã
    elif (month == 6 and day >= 22) or (month == 7 and day <= 22):
        return "cancer"  # –†–∞–∫
    elif (month == 7 and day >= 23) or (month == 8 and day <= 23):
        return "leo"  # –õ–µ–≤
    elif (month == 8 and day >= 24) or (month == 9 and day <= 23):
        return "virgo"  # –î–µ–≤–∞
    elif (month == 9 and day >= 24) or (month == 10 and day <= 23):
        return "libra"  # –í–µ—Å—ã
    elif (month == 10 and day >= 24) or (month == 11 and day <= 22):
        return "scorpio"  # –°–∫–æ—Ä–ø–∏–æ–Ω
    else:
        return "sagittarius"  # –°—Ç—Ä–µ–ª–µ—Ü

@bot.message_handler(func=lambda message: message.text == "üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")
def handle_subscribe(message):
    if dd == 0 or mm == 0:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
        return

    sign = get_zodiac_sign(dd, mm)
    daily_subscriptions[message.chat.id] = {'sign': sign}

    bot.send_message(
        message.chat.id,
        f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {get_zodiac_sign_display1(dd, mm)}!\n"
        f"–ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 —É—Ç—Ä–∞.",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
def handle_unsubscribe(message):
    chat_id = message.chat.id
    if chat_id in daily_subscriptions:
        del daily_subscriptions[chat_id]
        bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø.", reply_markup=keyboard)
    else:
        bot.send_message(chat_id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard)

def get_work_horoscope(sign):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –≤ URL-—Ñ–æ—Ä–º–∞—Ç Rambler
    sign_mapping = {
        "capricorn": "capricorn",
        "aquarius": "aquarius",
        "pisces": "pisces",
        "aries": "aries",
        "taurus": "taurus",
        "gemini": "gemini",
        "cancer": "cancer",
        "leo": "leo",
        "virgo": "virgo",
        "libra": "libra",
        "scorpio": "scorpio",
        "sagittarius": "sagittarius"
    }

    rambler_sign = sign_mapping.get(sign.lower(), "deva")
    url = f"https://horoscopes.rambler.ru/{rambler_sign}/career/"

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ Rambler
        content = soup.find('div', class_='dGWT9 cidDQ')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for elem in content.find_all(['a', 'script', 'style', 'img', 'iframe']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = content.get_text(separator='\n', strip=True)
        text = text.replace('–ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ:', '').strip()

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–†–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞–±–æ—á–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_love_horoscope(sign):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –≤ URL-—Ñ–æ—Ä–º–∞—Ç Rambler
    sign_mapping = {
        "capricorn": "capricorn",
        "aquarius": "aquarius",
        "pisces": "pisces",
        "aries": "aries",
        "taurus": "taurus",
        "gemini": "gemini",
        "cancer": "cancer",
        "leo": "leo",
        "virgo": "virgo",
        "libra": "libra",
        "scorpio": "scorpio",
        "sagittarius": "sagittarius"
    }

    rambler_sign = sign_mapping.get(sign.lower(), "oven")
    url = f"https://horoscopes.rambler.ru/{rambler_sign}/erotic/weekly/"

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ Rambler
        content = soup.find('div', class_='yLX2x Jgl8N vXHy6 YZauy')
        if not content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for elem in content.find_all(['a', 'script', 'style', 'img', 'iframe']):
            elem.decompose()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = content.get_text(separator='\n', strip=True)
        text = text.replace('–ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ:', '').strip()

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
        if len(text) > 4000:
            text = text[:4000] + "..."

        return text if text else "–õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª—é–±–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."